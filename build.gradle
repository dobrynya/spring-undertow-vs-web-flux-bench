buildscript {
	ext {
		kotlinVersion = '1.1.0'
		springBootVersion = '2.0.0.BUILD-SNAPSHOT'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

plugins {
	id 'nu.studer.jooq' version '2.0.3'
	id 'org.liquibase.gradle' version '1.2.1'
}


subprojects {
	apply plugin: 'kotlin'
	apply plugin: 'kotlin-spring'
	//apply plugin: 'eclipse'
	apply plugin: 'org.springframework.boot'

	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}


	dependencies {
		compile 'org.springframework.boot:spring-boot-starter-jooq'
		compile 'org.liquibase:liquibase-core'
		compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
		compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
		compile "io.github.microutils:kotlin-logging:1.4.3"
		runtime 'org.postgresql:postgresql'
		compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
		compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
		compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'

//		jooqRuntime "org.postgresql:postgresql"

		testCompile 'org.springframework.boot:spring-boot-starter-test'
	}

}




sourceCompatibility = 1.8


/*
jooq {
	db(sourceSets.main) {
		jdbc {
			driver = 'org.postgresql.Driver'
			url = 'jdbc:postgresql://localhost:5432/postgres'
			user = 'postgres'
			password = 'password'
		}
		generator {
			database {
				name = 'org.jooq.util.postgres.PostgresDatabase'
				inputSchema = 'public'
				includes = '.*'
				excludes = "databasechangelog|databasechangeloglock"
				forcedTypes {
					forcedType {
						//name = 'varchar'
						userType = "java.lang.String"
						binding = "demo.support.PostgresJacksonBinding"
						expression = '.*'
						types = 'JSONB?'
					}
				}
			}
			generate {
				relations = true
				deprecated = false
				records = true
				immutablePojos = true
				fluentSetters = true
			}
			target {
				packageName = 'demo.model.jooq'
				directory = 'src/main/java'
			}
		}
	}
}

generateDbJooqSchemaSource.enabled = true
*/

